<template>
  <div class="container-fluid mt-4">
    <b-alert :show="loading" variant="info">Loading...</b-alert>
    <b-row>
    <b-col lg="3">
              <h1 style="white-space:nowrap">{{this.$route.params.resource.name}}</h1>
      </b-col>
  
      <b-col>
        <b-card>
        <table class="table table-striped">
          <thead>
            <tr>
              <th>Name</th>
                <th>&nbsp;</th>
                <th>&nbsp;</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="resource in resources" :key="resource.id">
              <td>{{ resource.name }}</td>
              <td>
                <b-button size="sm" variant="primary" href="#" @click.prevent="populateResourceToView(resource)">view</b-button>&nbsp;  
              </td>
              <td>
                <b-button size="sm" variant="primary" href="#" @click.prevent="populateResourceToEdit(resource)">Edit</b-button>&nbsp;  
              </td>
              <td>
                <b-button size="sm" variant="danger" href="#" @click.prevent="deleteResource(resource.id)">X</b-button>
              </td>
            </tr>
          </tbody>
        </table>
        </b-card>
      </b-col>
    </b-row>
  </div>
</template>

<script>
import api from '@/api'
export default {
  data () {
    return {
      loading: false,
      resources: [],
      resource: [],
      model: {}
    }
  },
  async created () {
    this.refreshResources()
  },
  methods: {
    updateLoadView (resource) {
      console.log('called')
      this.model = Object.assign({}, this.$route.params.resource)
    },
    async refreshResources () {
      this.loading = true
      this.resources = await api.getResources()
      this.loading = false
    },
    async populateResourceToEdit (resource) {
      this.model = Object.assign({}, resource)
    },
    async saveResource () {
      if (this.model.id) {
        await api.updateResource(this.model.id, this.model)
      } else {
        await api.createResource(this.model)
      }
      this.model = {} // reset form
      await this.refreshResources()
    },
    async deleteResource (id) {
      if (confirm('Are you sure you want to delete this resource?')) {
        // if we are editing a resource we deleted, remove it from the form
        if (this.model.id === id) {
          this.model = {}
        }
        await api.deleteResource(id)
        await this.refreshResources()
      }
    }
  },
  mounted: function (resource) {
    this.updateLoadView()
  }
}
</script>
